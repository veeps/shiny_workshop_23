
## Intro.R example
 ☐ Add Render text
 output$math <- renderText({5*3})
 ☐ Add Textoutput
textOutput(outputId = "math")
 ☐ Talk about how this is a string

 # Exercise: 
 ☐ Add shiny widget to intro.R

 ------ BACK TO SLIDES --------
 ☐ Demo final dashboard
 ☐ Talk about file structure - final for solutions

 ------------ CODE -------------

# command + D to complete
 ☐ Read in dataframe in eda.R file
 ☐ Create top 10 by protein descending
 df |> arrange(desc(Protein)) |> head(6)

 #### Create bbar plot
 ☐ Fill in ggplot code
ggplot(df |> arrange(desc(Protein)) |> head(10),
         aes(y=Protein, 
             x=Name)) + 
    geom_bar(stat="identity", fill = "#0add8c") +
    theme(axis.title.x=element_blank())

 ☐ Open 02_cereals.R file 
 ☐ Render bar chart in Shiny app

  output$bar_plot <- renderPlot({
    ggplot(df |> arrange(desc(Protein)) |> head(10),
           aes(y=Protein, 
               x=Name)) + 
      geom_bar(stat="identity", fill = "#0add8c") +
      theme(axis.title.x=element_blank())
  })
   ☐ Add bar plot in UI
    plotOutput("bar_plot"),


  ------ BACK TO SLIDES --------
 ☐ Talk about UI <> Server interaction



 ------------ CODE -------------

# update UI section
fluidRow(plotOutput("bar_plot"))


 #### Render datatable
# copy table head to section
 ☐ Update server section
    output$table <- renderDT(df |> arrange(desc(Protein)) |> head(10))
 ☐ Update UI section
     fluidRow(DTOutput("table"))
 ☐ Show DataTable options - remove row number, limit number of rows per view, hide search, etc.
 output$table <- renderDT(df |> arrange(desc(Protein)) |> head(10), options=list( info = FALSE, paging = T, searching = F, pageLength = 5), rownames = F)


# Radio buttons
 ☐ Create radio buttons
 #create side panel with dropdown menu
radioButtons(inputId="bar_var", #references the input to server
                                 label = h3("Select Variable"), # text that appears on UI
                                 choices=nutrient_dense |> sort(),
                                 selected="Protein")

 ☐ Show that the dropdown doesn't do anything. Because we have to tell Shiny what to do with the input
 ☐ Add output text in server section. Don't code, just follow along!
 output$text <- renderText({input$bar_var})
 ☐ Scroll up to UI section
 textOutput("text") # mention the commas!
 
  ------ BACK TO SLIDES --------
 ☐ Talk about subsetting data
  ☐ Talk about data masking!
 .data[[input$bar_var]]
 # this way you don't have to repeat the df name all the time

  ------------ CODE -------------

 ☐ Add input variable to ggplot
  output$bar_plot <- renderPlot({
    ggplot(df |> arrange(desc(.data[[input$bar_var]])) |> head(10),
           aes(y=.data[[input$bar_var]], 
               x=Name)) + 
      geom_bar(stat="identity", fill = "#0add8c") +
      theme(axis.title.x=element_blank())
  })


------ 5 MIN BREAK ----------

###### Create scatter plot
 ☐ In EDA.R file, create a scatter plot with ggplot
ggplot(df, aes(x = Protein, y = Sugars)) + geom_point() 
 ☐ Go into Plotly examples - show plotly site + my map example
 https://plotly.com/r/
 ☐ Create scatter plot with plotly
plot_ly(data = df, x= ~Protein, y = ~Sugars,
        type = "scatter", mode = "markers")
 ☐ Format hover. Get x and y values with %{x} and %{y}
 Remove traceO with <extra></extra>
 plot_ly(data = df, x= ~Protein, y = ~Sugars,
        type = "scatter", mode = "markers",
        hovertemplate = paste0(
          df$Name, "<br>", "Protein", ": %{x}<br>", "Sugars", ": %{y}<extra></extra>")) 
 ☐ Back to 02_cereals.R, undo comment for output$scatter 
   output$scatter_plot <- renderPlotly({plot_ly(data = df, x= ~Protein, y = ~Sugars,
        type = "scatter", mode = "markers",
        hovertemplate = paste0(
          df$Name, "<br>", "Protein", ": %{x}<br>", "Sugars", ": %{y}<extra></extra>")) 
          })
 ☐ Add it to UI section
 plotlyOutput("scatter_plot")

  ------ BACK TO SLIDES --------


## UI Frameworks
 ☐ Back to slides, go over UI frameworks and fluid page
 ☐ Back to slides. Talk about grid system
 ☐ app.R make radio buttons in same row as the barchart
     # create side panel with radiobuttons
  fluidRow(
    column(3,
           radioButtons(inputId="bar_var", #references the input to server
                        label = h3("Select Variable"), # text that appears on UI
                        choices=nutrient_dense |> sort(),
                        selected="Protein")),
    column(9, plotOutput("bar_plot"))
  ), # end fluidRow
   ☐ Talk about wanting other inputs into scatter plot. 
   ☐ Choices can either be written in as a list or you can use colnames directly
   ☐ Do the same thing with scatter plot, create X dropdown menu
     fluidRow(
    column(3,selectInput(inputId="xaxis", #references the input to server
                         label = h3("Select X Variable"), # text that appears on UI
                         choices=colnames(df)[2:10] |> sort(),
                         selected="Calories")),
    column(9, plotlyOutput("scatter_plot"))
  )

------ BACK TO SLIDES --------
 ☐ Go over making a row

 # Exercise: 
 ☐ Create drop down menu for Y
  # exercise - add drop down Y menu
  fluidRow(
    column(3,
      selectInput(inputId="xaxis", #references the input to server
                  label = h3("Select X Variable"), # text that appears on UI
                  choices=colnames(df)[2:10] |> sort(),
                  selected="Calories"),
      selectInput(inputId="yaxis", #references the input to server
                  label = h3("Select Y Variable"), # text that appears on UI
                  choices=colnames(df)[2:10] |> sort(),
                  selected="Sugars")
           ),
    column(9, plotlyOutput("scatter_plot"))
  )

 # Exercise: 
    ☐ Live code! Update the inputs into scatter plot
  output$scatter_plot <- renderPlotly({plot_ly(data = df, x= df[[input$xaxis]], y = df[[input$yaxis]],
                                               type = "scatter", mode = "markers",
                                               hovertemplate = paste0(
                                                 df$Name, "<br>", input$xaxis, ": %{x}<br>", input$yaxis, ": %{y}<extra></extra>"))  })


------ BACK TO SLIDES --------
 ☐ That was hard.. start on paper!
 ☐ Deploy to shiny!
 ☐ Sign up for account
 ☐ Install rsconnect
 ☐ Copy token code
 ☐ Deploy app name



 ☐ Advanced Reactive



 ------ CODE --------
 ☐ Let's say we wanted to sort the datatable by the selection on bar chart input. How do we update that?
 ☐ Update arrange to desc(.data[[input$bar_var]])
 ☐ Notice it's the same input as a barchart. So we can create it as a reactive variable
 ☐ Create df_sub
   # create reactive dataframe subset
  df_sub <- reactive({
    df  |> arrange(desc(.data[[input$bar_var]])) |> head(10)
  })

  ☐ Now you can also use this variable to add line breaks into the bar chart
   + scale_x_discrete(labels=function(x){gsub(" ", "\n", df_sub()$Name)})
  

  --- Extras ----

  ☐ Talk about style-css. Show how you add it into fluid row
  ☐ Add spacing into your rows 
  style="padding: 40px",
  ☐ Show about font awesome. Search for free 
  https://shiny.rstudio.com/reference/shiny/0.14/icon.html 
   icon("heart", "fa-2xl", lib="font-awesome"),
  ☐ Demo getting event click from plotly
    # sample text
  output$plot_click<- renderText({event_data("plotly_click")$x})

  # in UI section
    verbatimTextOutput("plot_click")


   ☐ Redeploy to Shinyapps!
  
